<?xml version="1.0" encoding="utf-8" ?>
<mansion xmlns="http://schemas.premotion.nl/mansion/1.0/stl.xsd" xmlns:web="http://schemas.premotion.nl/mansion/1.0/web/tags.xsd" xmlns:portal="http://schemas.premotion.nl/mansion/1.0/web/portal/tags.xsd" xmlns:forms="http://schemas.premotion.nl/mansion/1.0/web.form.tags.xsd" xmlns:ctrls="http://schemas.premotion.nl/mansion/1.0/web.controls.tags.xsd">

	<!-- Invoked by the dispatcher when the application is bootstrapped -->
	<declareProcedure procedureName="HandleView">
		
		<!-- retrieve the shared content node -->
		<retrieveChildNode parentPointer="1" type="ContentIndexRoot" target="ContentIndexRootNode" global="true" />

		<!-- the page rendering starts there, the response template contains the raw page which is personalized -->
		<web:respondDocument contentType="text/html" encoding="UTF-8" cache="true">
			<!-- check if the site node exists -->
			<if condition="{Not( IsNode( $SiteNode ) )}">
				<throw message="No site node found for hostheader '{Request.url}', please check configuration" />
			</if>

			<!-- check if the url node exists -->
			<if condition="{Not( IsNode( $UrlNode ) )}">
				<fetchNode source="{$SiteNode}" target="UrlNode" global="true" />
			</if>

			<!-- determine the PageNode and the ContentNode -->
			<invokeProcedure procedureName="SelectContentAndPageNodes" />
			<fetchNode source="{$PageNode}" target="PageProperties" global="true" />
			<fetchNode source="{$ContentNode}" target="ContentProperties" global="true" />

			<!-- determine if the url is the proper unique url -->
			<if condition="{Not( IsEqual( WithoutQueryString( Request.url ), NodeUrl( $ContentNode ) ) )}">
				<web:redirectRequest url="{CopyQueryString( Request.url, NodeUrl( $ContentNode ) )}" permanent="true" />
			</if>

			<!-- next step is the theme which to render, one of the nodes between PageNode and SiteNode determines the theme -->
			<portal:retrieveThemeNode source="{$PageNode}" target="ThemeNode" global="true">
				<notFound>
					<throw message="Could not determine theme for page, please check configuration" />
				</notFound>
			</portal:retrieveThemeNode>

			<!-- retrieve the block sets -->
			<portal:retrieveBlockNodeset source="{$PageNode}" target="PageBlockNodeset" global="true" />
			<portal:retrieveBlockNodeset source="{$ThemeNode}" target="ThemeBlockNodeset" global="true" />

			<!-- retrieve the user node when authenticated -->
			<if condition="{IsAuthenticated()}">
				<retrieveNode guid="{User.guid}" target="UserNode" global="true" />
			</if>

			<!-- open the theme scripts and templates -->
			<openTemplate type="{ThemeNode.theme}">
			<openScript type="{ThemeNode.theme}">
					
				<responseTemplate cacheKey="{Request.url}" enabled="false">
					<!-- disable caching for user logged in to the backoffice -->
					<if condition="{IsBackofficeUserAuthenticated()}">
						<disableResponseTemplateCache />
					</if>

					<!-- start the rendering the theme -->
					<invokeProcedure procedureName="RenderTheme" />

				</responseTemplate>

			</openScript>
			</openTemplate>
			
		</web:respondDocument>
		
	</declareProcedure>
	
		<!-- selects the PageNode and ContentNode for the current request	-->
		<!-- output:																		-->
		<!--	PageNode																		-->
		<!--	ContentNode																	-->
		<declareProcedure procedureName="SelectContentAndPageNodes">
			<switch condition="True">

				<!-- check if the url node type is assignable to type Page -->
				<case value="{IsAssignable( UrlNode.type, 'Page' )}">
					<fetchNode source="{$UrlNode}" target="PageNode" global="true" />
					<fetchNode source="{$UrlNode}" target="ContentNode" global="true" />
				</case>

				<!-- check if the url node type is assignable from type Content -->
				<case value="{Or( IsAssignable( UrlNode.type, 'Content' ), IsAssignable( UrlNode.type, 'ContentIndex' ) )}">
					<fetchNode source="{$UrlNode}" target="ContentNode" global="true" />
					<portal:retrieveTemplatePageNode source="{$ContentNode}" siteNode="{$SiteNode}" target="PageNode" global="true">
						<notFound>
							<throw message="Could not determine template page for node {UrlNode.path} ({UrlNode.pointer}), please check configuration" />
						</notFound>
					</portal:retrieveTemplatePageNode>
				</case>

				<!-- something must have gone wrong because we dont know the base type -->
				<default>
					<throw message="I really dont have a clue what to do with nodes of type '{UrlNode.type}'" />
				</default>

			</switch>
		</declareProcedure>
	
	
	
	<!-- ######################################################### -->
	<!-- Portal admin handlers                                     -->
	<!-- ######################################################### -->
	
	<!-- handler for block configuration -->
	<declareProcedure procedureName="HandleConfigureBlock">
		<!-- first check permission -->
		<if condition="{Not( HasPortalAdminPermission() )}">
			<web:setStatusCode code="401" description="You do not have enough permission to execute this request" />
			<exitProcedure />
		</if>

		<!-- start dialog rendering -->
		<web:respondDocument contentType="text/html" encoding="UTF-8" cache="false">
			<renderSection name="PortalAdminDialog">

				<fetchNode source="{$UrlNode}" target="FormSourceNode">
					<setProperties dataspaceName="TargetProperties" type="{FormSourceNode.type}">
					<forms:form name="edit-block" dataSource="{$FormSourceNode}" targetField="Content">
						<forms:step label="Edit block '{FormSourceNode.name}'" headerCssClasses="modal-header" bodyCssClasses="modal-body">
							<forms:validationSummary/>

							<!-- delegate to inherited types -->
							<openScript type="{FormSourceNode.type}" extension="xform" checkExists="true">
								<invokeProcedure procedureName="RenderXFormContent" />
							</openScript>

							<forms:buttonBar cssClass="modal-footer">
								<forms:button action="store" label="Save" cssClass="btn-success" iconClass="icon-save" tooltip="Save any changes made to this block" />
								<forms:button action="cancel" label="Cancel" cssClass="btn-warning" iconClass="icon-undo" tooltip="Reverts any changes made to this block" />
							</forms:buttonBar>

							<!-- processes the form actions -->
							<forms:processScriptAction supportedActions="cancel" requiresValidForm="false">
								<retrieveParentNode childSource="{$FormSourceNode}" target="ParentNode">
									<web:redirectRequest url="{NodeUrl( $ParentNode )}" />
									<breakExecution />
								</retrieveParentNode>
								
							</forms:processScriptAction>
							<forms:processScriptAction supportedActions="store">
								<retrieveParentNode childSource="{$FormSourceNode}" target="ParentNode">
									<editNode source="{$FormSourceNode}">
										<copyProperties source="{$FieldProperties}" target="{$EditProperties}" />
									</editNode>
									<web:redirectRequest url="{NodeUrl( $ParentNode )}" />
								</retrieveParentNode>
								<breakExecution />
							</forms:processScriptAction>

						</forms:step>
					</forms:form>
					</setProperties>
				</fetchNode>

			</renderSection>
		</web:respondDocument>
		
	</declareProcedure>
	
	<!-- callback from the move block -->
	<declareProcedure procedureName="HandleUpdateBlockPosition">
		<!-- first check permission -->
		<if condition="{Not( HasPortalAdminPermission() )}">
			<web:setStatusCode code="401" description="You do not have enough permission to execute this request" />
			<exitProcedure />
		</if>
		
		<!-- retrieve the nodes -->
		<retrieveNode id="{Get.blockId}" target="BlockNode" global="true">
			<notFound>
				<web:setStatusCode code="404" description="Could not find block with id '{Get.blockId}'" />
				<exitProcedure />
			</notFound>
		</retrieveNode>
		<retrieveNode id="{Get.columnOwnerId}" target="ColumnOwnerNode" global="true">
			<notFound>
				<web:setStatusCode code="404" description="Could not find column owner with id '{Get.blockId}'" />
				<exitProcedure />
			</notFound>
		</retrieveNode>
		
		<!-- if the column owner node is not the parent of the block node, move the block to the column owner node -->
		<if condition="{Not( IsDirectParentOf( $ColumnOwnerNode, $BlockNode ) )}">
			<moveNode source="{$BlockNode}" newParent="{$ColumnOwnerNode}" target="BlockNode" global="true" />
		</if>
		
		<!-- update block properties -->
		<editNode source="{$BlockNode}" order="{Get.order}" column="{Get.columnName}" />
		
	</declareProcedure>

	<!-- handler for block configuration -->
	<declareProcedure procedureName="HandleRemoveBlock">
		<!-- first check permission -->
		<if condition="{Not( HasPortalAdminPermission() )}">
			<web:setStatusCode code="401" description="You do not have enough permission to execute this request" />
			<exitProcedure />
		</if>
		
		<!-- start dialog rendering -->
		<web:respondDocument contentType="text/html" encoding="UTF-8" cache="false">
			<renderSection name="PortalAdminDialog">
				
				<!-- create the delete node form -->
				<forms:form name="delete-block" targetField="Content">
					<forms:step label="Remove block '{UrlNode.name}' from page" headerCssClasses="modal-header" bodyCssClasses="modal-body">
						<forms:errorMessage>Are you sure you want to delete block '{UrlNode.name}' from this page? This action can not be undone.</forms:errorMessage>
						<forms:buttonBar cssClass="modal-footer">
							<forms:button action="delete" label="Delete" cssClass="btn-danger" iconClass="icon-remove-sign" tooltip="Yes, delete this block permanently" />
							<forms:button action="cancel" label="Cancel" cssClass="btn-info" isDefault="true" iconClass="icon-undo" tooltip="No, cancel deleting this block" />
						</forms:buttonBar>

						<!-- processes the form actions -->
						<forms:processScriptAction supportedActions="cancel" requiresValidForm="false">
							<retrieveParentNode childSource="{$FormSourceNode}" target="ParentNode">
								<web:redirectRequest url="{NodeUrl( $ParentNode )}" />
								<breakExecution />
							</retrieveParentNode>
						</forms:processScriptAction>
						<forms:processScriptAction supportedActions="delete">
							<retrieveParentNode childSource="{$UrlNode}" target="ParentNode">
								<deleteNode source="{$UrlNode}" />
								<web:redirectRequest url="{NodeUrl( $ParentNode )}" />
							</retrieveParentNode>
							<breakExecution />
						</forms:processScriptAction>

					</forms:step>
				</forms:form>
				
			</renderSection>
		</web:respondDocument>
		
	</declareProcedure>
	
</mansion>