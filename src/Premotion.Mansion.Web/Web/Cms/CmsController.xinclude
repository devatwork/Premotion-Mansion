<?xml version="1.0" encoding="utf-8" ?>
<mansion xmlns="http://schemas.premotion.nl/mansion/1.0/stl.xsd" xmlns:web="http://schemas.premotion.nl/mansion/1.0/web/tags.xsd" xmlns:cms="http://schemas.premotion.nl/mansion/1.0/web/web.cms.tags.xsd">
	
	<!-- ############################################################### -->
	<!-- Controller handlers                                             -->
	<!-- ############################################################### -->

	<!-- Invoked by the dispatcher when the application is bootstrapped -->
	<declareProcedure procedureName="HandlePlugin">

		<!-- render the active plugin -->
		<invokeProcedure procedureName="RenderPluginView" pluginType="{NotEmpty( Route.routeParameter0, 'CmsHomePlugin' )}" viewName="{NotEmpty( Route.routeParameter1, 'Default' )}" />

	</declareProcedure>


	<!-- Invoked by the dispatcher when the application is bootstrapped -->
	<declareProcedure procedureName="HandlePluginDownload">

		<!-- check if the user is not authenticated -->
		<if condition="{Not( IsAuthenticated() )}">
			<web:redirectRequest url="{CmsRouteUrl( 'Authentication', 'Authenticate' )}"/>
		</if>

		<!-- check if the user is not allowed to use the CMS -->
		<if condition="{Not( HasPermission( 'Cms', 'use' ) )}">
			<logoff />
			<web:redirectRequest url="{CmsRouteUrl( 'Authentication', 'Authenticate' )}"/>
		</if>

		<!-- retrieve the root node -->
		<retrieveNode id="1" target="RootNode" global="true" />
		<fetchNode source="{$UrlNode}" target="CurrentNode" global="true">
			<notFound>
				<fetchNode source="{$RootNode}" target="CurrentNode" global="true" />
			</notFound>
		</fetchNode>

		<!-- determine the active plugin -->
		<setProperties dataspaceName="ActivePluginProperties" pluginType="{NotEmpty( Route.routeParameter0, 'CmsHomePlugin' )}" viewName="{NotEmpty( Route.routeParameter1, 'Default' )}">

			<!-- invoke the default view of the active plugin -->
			<invokeProcedure procedureName="InvokePluginMethod" pluginType="{ActivePluginProperties.pluginType}" methodName="PluginDowload{ActivePluginProperties.viewName}" />

		</setProperties>

	</declareProcedure>

	
	<!-- Invoked by the dispatcher when the application is bootstrapped -->
	<declareProcedure procedureName="HandleDefault">

		<!-- render the active plugin -->
		<invokeProcedure procedureName="RenderPluginView" pluginType="CmsHomePlugin" viewName="Default" />

	</declareProcedure>

	
	
	<!-- render the plugin view of the given plugin -->
	<!-- arguments:                                 -->
	<!--   pluginType, the type of the plugin       -->
	<!--   viewName, the name of the view           -->
	<declareProcedure procedureName="RenderPluginView">

		<!-- we are returning a page -->
		<web:respondDocument contentType="text/html" encoding="UTF-8" cache="false">

			<!-- disable caching -->
			<web:disableOutputCache />

			<!-- check if the user is not authenticated -->
			<if condition="{Not( IsAuthenticated() )}">
				<web:redirectRequest url="{CmsRouteUrl( 'Authentication', 'Authenticate' )}"/>
			</if>

			<!-- check if the user is not allowed to use the CMS -->
			<if condition="{Not( HasPermission( 'Cms', 'use' ) )}">
				<logoff />
				<web:redirectRequest url="{CmsRouteUrl( 'Authentication', 'Authenticate' )}"/>
			</if>
			
			<!-- retrieve the root node -->
			<retrieveNode id="1" target="RootNode" global="true" />
			<fetchNode source="{$UrlNode}" target="CurrentNode" global="true">
				<notFound>
					<fetchNode source="{$RootNode}" target="CurrentNode" global="true" />
				</notFound>
			</fetchNode>

			<!-- render the CMS section -->
			<renderSection name="CmsPage">
				<renderSection name="PageContainer">
					
					<!-- determine the active plugin -->
					<setProperties dataspaceName="ActivePluginProperties" pluginType="{Arguments.pluginType}" viewName="{Arguments.viewName}">
					
						<!-- load all the plugins -->
						<cms:getPluginDataset target="CmsPluginDataset">
					
							<!-- render the user menu -->
							<invokeProcedure procedureName="RenderUserMenu" />

							<renderSection name="Layout">
								<!-- render the navigation menu -->
								<invokeProcedure procedureName="RenderNavigation" />
					
								<!-- render the detail view -->
								<invokeProcedure procedureName="RenderDetailView" />
							</renderSection>
							
						</cms:getPluginDataset>

					</setProperties>
					
				</renderSection>
			</renderSection>

		</web:respondDocument>

	</declareProcedure>
	
	
	
	<!-- renders the user menu -->
	<declareProcedure procedureName="RenderUserMenu">
		<renderSection name="UserMenu">
			<!-- Call the RenderPluginUserMenu method on all plug-ins -->
			<invokeProcedure procedureName="InvokePluginsMethod" methodName="RenderPluginUserMenu" />
		</renderSection>
	</declareProcedure>
	
	
	
	<!-- renders the navigation menu -->
	<declareProcedure procedureName="RenderNavigation">
		<renderSection name="Navigation">
			<!-- Call the RenderPluginNavigation method on all plug-ins -->
			<invokeProcedure procedureName="InvokePluginsMethod" methodName="RenderPluginNavigation" />
		</renderSection>
	</declareProcedure>
	
	
	
	<!-- renders the detail view -->
	<declareProcedure procedureName="RenderDetailView">
		<!-- invoke the default view of the active plugin -->
		<invokeProcedure procedureName="InvokePluginMethod" pluginType="{ActivePluginProperties.pluginType}" methodName="RenderPlugin{ActivePluginProperties.viewName}DetailView" />
	</declareProcedure>
	
	
	
	<!-- invokes a method on all the plugins                  -->
	<!-- parameters:                                          -->
	<!--   methodName, the name of the method which to invoke -->
	<declareProcedure procedureName="InvokePluginsMethod">
		<loopDataset source="{$CmsPluginDataset}" target="CmsPlugin">
			<invokeProcedure procedureName="InvokePluginMethod" pluginType="{CmsPlugin.type}" methodName="{Arguments.methodName}" />
		</loopDataset>
	</declareProcedure>
	
	
	
	<!-- invokes a method on the given                        -->
	<!-- parameters:                                          -->
	<!--   pluginType, the name of the plugin                 -->
	<!--   methodName, the name of the method which to invoke -->
	<declareProcedure procedureName="InvokePluginMethod">
		
		<!-- open the script and template -->
		<openScript type="{Arguments.pluginType}">
		<openTemplate type="{Arguments.pluginType}">
				
			<!-- invoke the procedure -->
			<invokeProcedure procedureName="{Arguments.methodName}" />
				
		</openTemplate>
		</openScript>
		
	</declareProcedure>

</mansion>